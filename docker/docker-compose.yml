# =====================================
# Docker Compose 설정 - 머니매니저 시스템
# =====================================
#
# 개인 자산관리 웹 애플리케이션의 멀티 컨테이너 환경을 정의합니다.
# 전통적인 웹 아키텍처(PHP + MySQL + Nginx)를 Docker로 컨테이너화하여
# 개발 및 배포 환경의 일관성을 보장합니다.
#
# 아키텍처 개요:
# ┌─────────────┐    ┌──────────────┐    ┌─────────────┐
# │  Frontend   │───▶│  Backend API │───▶│   MySQL     │
# │ (Port 3001) │    │ (Port 8080)  │    │ (Port 3306) │
# └─────────────┘    └──────────────┘    └─────────────┘
#      │                      │                   │
#   PHP + Nginx         PHP-FPM + Nginx       MySQL 8.0
#
# 추가 서비스:
# - phpMyAdmin (Port 8081) - 개발용 DB 관리 도구
#
# 주요 특징:
# - 환경변수 기반 설정 (.env 파일)
# - 볼륨 마운트로 실시간 코드 반영
# - 네트워크 격리 및 서비스간 통신
# - 로그 중앙화 관리
# - 개발/프로덕션 프로필 지원
#
# @version 3.8
# @author YeongHoon Kim

version: '3.8'

services:
  # =====================================
  # 프론트엔드 서비스 (사용자 인터페이스)
  # =====================================
  #
  # 역할: 로그인, 자산현황, 지출관리 등 사용자 인터페이스 제공
  # 기술: PHP 8.2 + Nginx + jQuery + Materialize CSS
  # 특징: 모바일 친화적 반응형 웹앱
  frontend:
    build:
      context: ..                                    # 프로젝트 루트를 빌드 컨텍스트로 설정
      dockerfile: docker/frontend.Dockerfile        # 프론트엔드 전용 Dockerfile
    container_name: money_frontend                   # 컨테이너 이름 (디버깅 편의성)
    ports:
      - "3001:80"                                   # 호스트 3001 → 컨테이너 80 포트 매핑
    volumes:
      # 실시간 코드 반영을 위한 바인드 마운트
      - ../frontend:/var/www/html                   # 프론트엔드 소스코드
      - ../logs:/var/log/frontend                   # 로그 파일 (호스트에서 접근 가능)
    environment:
      # PHP 시간대 설정 (기본값: Asia/Seoul)
      - PHP_TIMEZONE=${PHP_TIMEZONE:-Asia/Seoul}
    env_file:
      - ../.env                                     # 환경변수 파일 로드
    networks:
      - money_network                               # 내부 네트워크 연결
    depends_on:
      - backend-php                                 # 백엔드 PHP 서비스 의존성

  # =====================================
  # 백엔드 PHP-FPM 서비스 (API 로직 처리)
  # =====================================
  #
  # 역할: RESTful API 엔드포인트 제공, 비즈니스 로직 처리
  # 기술: PHP 8.2-FPM + CodeIgniter 패턴
  # 기능: CRUD API, 인증, 데이터 검증, 아카이브 관리
  backend-php:
    build:
      context: ..                                    # 프로젝트 루트를 빌드 컨텍스트로 설정
      dockerfile: docker/backend.Dockerfile         # 백엔드 전용 Dockerfile
    container_name: money_backend_php                # 컨테이너 이름
    volumes:
      # 실시간 개발을 위한 바인드 마운트
      - ../backend:/var/www/html                    # 백엔드 API 소스코드
      - ../logs:/var/log/app                        # 애플리케이션 로그
    environment:
      # PHP 시간대 설정
      - PHP_TIMEZONE=${PHP_TIMEZONE:-Asia/Seoul}
    env_file:
      - ../.env                                     # 데이터베이스 연결 정보 등
    depends_on:
      - mysql                                       # MySQL 서비스 의존성
    networks:
      - money_network                               # 내부 네트워크

  # =====================================
  # 백엔드 Nginx 서비스 (API 게이트웨이)
  # =====================================
  #
  # 역할: HTTP 요청 라우팅, PHP-FPM과 연동, 정적 파일 서빙
  # 기술: Nginx Alpine (경량화)
  # 특징: RESTful URL 라우팅, CORS 헤더 설정
  backend-nginx:
    image: nginx:alpine                             # 공식 Nginx Alpine 이미지
    container_name: money_backend_nginx             # 컨테이너 이름
    ports:
      - "8080:80"                                   # API 전용 포트 (호스트 8080)
    volumes:
      # 백엔드 코드와 Nginx 설정 마운트
      - ../backend:/var/www/html                    # PHP 파일 접근용
      - ./nginx-backend.conf:/etc/nginx/conf.d/default.conf  # 커스텀 Nginx 설정
      - ../logs:/var/log/nginx                      # Nginx 액세스/에러 로그
    depends_on:
      - backend-php                                 # PHP-FPM 서비스 의존성
    networks:
      - money_network

  # =====================================
  # MySQL 데이터베이스 서비스
  # =====================================
  #
  # 역할: 애플리케이션 데이터 영구 저장
  # 기술: MySQL 8.0 (최신 안정 버전)
  # 특징: UTF-8 지원, 자동 초기화, 볼륨 백업
  mysql:
    image: mysql:8.0                                # 공식 MySQL 8.0 이미지
    container_name: money_mysql                     # 컨테이너 이름
    ports:
      - "3306:3306"                                 # 표준 MySQL 포트 노출
    environment:
      # MySQL 초기 설정 (환경변수 기반)
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-money_dev_2024}    # 루트 비밀번호
      MYSQL_DATABASE: ${DB_NAME:-money_management}            # 기본 데이터베이스
      MYSQL_CHARACTER_SET_SERVER: utf8mb4                    # 문자셋 (이모지 지원)
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci             # 정렬 규칙
    volumes:
      # 데이터 영구 저장 및 초기화 스크립트
      - mysql_data:/var/lib/mysql                            # 데이터 볼륨 (영구 저장)
      - ../schema.sql:/docker-entrypoint-initdb.d/01-schema.sql        # 스키마 자동 생성
      - ../backend/test-sample-data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql  # 샘플 데이터
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf              # MySQL 설정 파일
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    networks:
      - money_network

  # =====================================
  # phpMyAdmin 서비스 (개발 도구)
  # =====================================
  #
  # 역할: 웹 기반 MySQL 관리 인터페이스
  # 용도: 개발 및 디버깅용 (프로덕션 비활성화)
  # 접근: http://localhost:8081
  phpmyadmin:
    image: phpmyadmin/phpmyadmin                    # 공식 phpMyAdmin 이미지
    container_name: money_phpmyadmin                # 컨테이너 이름
    ports:
      - "8081:80"                                   # phpMyAdmin 웹 인터페이스
    environment:
      # phpMyAdmin 설정
      PMA_HOST: mysql                               # MySQL 호스트 이름
      PMA_PORT: 3306                                # MySQL 포트
      PMA_USER: root                                # 기본 사용자
      PMA_PASSWORD: ${DB_PASSWORD:-money_dev_2024}  # MySQL 루트 비밀번호
      MYSQL_CHARSET: utf8mb4                        # 문자셋
      MYSQL_COLLATION: utf8mb4_unicode_ci           # 정렬 규칙
    depends_on:
      - mysql                                       # MySQL 서비스 의존성
    networks:
      - money_network
    profiles:
      - dev                                         # 개발 프로필에서만 실행

# =====================================
# 볼륨 정의 (데이터 영구 저장)
# =====================================
volumes:
  mysql_data:                                       # MySQL 데이터 영구 저장 볼륨
    driver: local                                   # 로컬 드라이버 사용

# =====================================
# 네트워크 정의 (서비스간 통신)
# =====================================
networks:
  money_network:                                    # 애플리케이션 전용 네트워크
    driver: bridge                                  # 브리지 네트워크 드라이버
    # 특징: 컨테이너간 격리된 통신, DNS 자동 해석